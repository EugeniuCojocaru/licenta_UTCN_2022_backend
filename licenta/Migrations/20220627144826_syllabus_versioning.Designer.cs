// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using licenta.DbContexts;

#nullable disable

namespace licenta.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20220627144826_syllabus_versioning")]
    partial class syllabus_versioning
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("licenta.Entities.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Entity")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Operation")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("licenta.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("licenta.Entities.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("licenta.Entities.FieldOfStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("FieldsOfStudy");
                });

            modelBuilder.Entity("licenta.Entities.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("licenta.Entities.Section1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CycleOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldOfStudyId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormOfEducation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProgramOfStudy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("FieldOfStudyId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections1");
                });

            modelBuilder.Entity("licenta.Entities.Section10", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionPromotion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConditionsFinalExam")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourcePercentage")
                        .HasColumnType("integer");

                    b.Property<string>("CourseCriteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourseMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LaboratoryCriteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LaboratoryMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LaboratoryPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("MinimumPerformance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectCriteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectPercentage")
                        .HasColumnType("integer");

                    b.Property<string>("SeminarCriteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeminarMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeminarPercentage")
                        .HasColumnType("integer");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections10");
                });

            modelBuilder.Entity("licenta.Entities.Section2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Assessment")
                        .HasColumnType("integer");

                    b.Property<int>("Category1")
                        .HasColumnType("integer");

                    b.Property<int>("Category2")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearOfStudy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Sections2");
                });

            modelBuilder.Entity("licenta.Entities.Section3", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CourseHoursPerSemester")
                        .HasColumnType("integer");

                    b.Property<int>("CourseHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualStudyA")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualStudyB")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualStudyC")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualStudyD")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualStudyE")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualStudyF")
                        .HasColumnType("integer");

                    b.Property<int>("LaboratoryHoursPerSemester")
                        .HasColumnType("integer");

                    b.Property<int>("LaboratoryHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectHoursPerSemester")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SeminarHoursPerSemester")
                        .HasColumnType("integer");

                    b.Property<int>("SeminarHoursPerWeek")
                        .HasColumnType("integer");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections3");
                });

            modelBuilder.Entity("licenta.Entities.Section4", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Competences")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections4");
                });

            modelBuilder.Entity("licenta.Entities.Section5", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections5");
                });

            modelBuilder.Entity("licenta.Entities.Section6", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cross")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Professional")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections6");
                });

            modelBuilder.Entity("licenta.Entities.Section7", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GeneralObjective")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpecificObjectives")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections7");
                });

            modelBuilder.Entity("licenta.Entities.Section8", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BibliographyCourse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BibliographyLab")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.Property<string>("TeachingMethodsCourse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeachingMethodsLab")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections8");
                });

            modelBuilder.Entity("licenta.Entities.Section8Element", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCourse")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Section8Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Section8Id");

                    b.ToTable("Section8Elements");
                });

            modelBuilder.Entity("licenta.Entities.Section9", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Sections9");
                });

            modelBuilder.Entity("licenta.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("licenta.Entities.Syllabus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section10Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section2Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section3Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section4Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section5Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section6Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section7Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section8Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Section9Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Section10Id");

                    b.HasIndex("Section1Id");

                    b.HasIndex("Section2Id");

                    b.HasIndex("Section3Id");

                    b.HasIndex("Section4Id");

                    b.HasIndex("Section5Id");

                    b.HasIndex("Section6Id");

                    b.HasIndex("Section7Id");

                    b.HasIndex("Section8Id");

                    b.HasIndex("Section9Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Syllabuses");
                });

            modelBuilder.Entity("licenta.Entities.SyllabusSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectId", "SyllabusId");

                    b.ToTable("SyllabusSubjects");
                });

            modelBuilder.Entity("licenta.Entities.SyllabusTeacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.HasKey("TeacherId", "SyllabusId");

                    b.ToTable("SyllabusTeachers");
                });

            modelBuilder.Entity("licenta.Entities.SyllabusVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SyllabusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("SyllabusVersions");
                });

            modelBuilder.Entity("licenta.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("licenta.Entities.Department", b =>
                {
                    b.HasOne("licenta.Entities.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("licenta.Entities.Faculty", b =>
                {
                    b.HasOne("licenta.Entities.Institution", "Institution")
                        .WithMany("Faculties")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("licenta.Entities.FieldOfStudy", b =>
                {
                    b.HasOne("licenta.Entities.Department", "Department")
                        .WithMany("FieldsOfStudy")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("licenta.Entities.Section1", b =>
                {
                    b.HasOne("licenta.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("licenta.Entities.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("licenta.Entities.FieldOfStudy", "FieldOfStudy")
                        .WithMany()
                        .HasForeignKey("FieldOfStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("licenta.Entities.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("FieldOfStudy");

                    b.Navigation("Institution");

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section10", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section2", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("licenta.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("licenta.Entities.Section3", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section4", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section5", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section6", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section7", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section8", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Section8Element", b =>
                {
                    b.HasOne("licenta.Entities.Section8", "Section8")
                        .WithMany("Lectures")
                        .HasForeignKey("Section8Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section8");
                });

            modelBuilder.Entity("licenta.Entities.Section9", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Syllabus", b =>
                {
                    b.HasOne("licenta.Entities.Section10", "Section10")
                        .WithMany()
                        .HasForeignKey("Section10Id");

                    b.HasOne("licenta.Entities.Section1", "Section1")
                        .WithMany()
                        .HasForeignKey("Section1Id");

                    b.HasOne("licenta.Entities.Section2", "Section2")
                        .WithMany()
                        .HasForeignKey("Section2Id");

                    b.HasOne("licenta.Entities.Section3", "Section3")
                        .WithMany()
                        .HasForeignKey("Section3Id");

                    b.HasOne("licenta.Entities.Section4", "Section4")
                        .WithMany()
                        .HasForeignKey("Section4Id");

                    b.HasOne("licenta.Entities.Section5", "Section5")
                        .WithMany()
                        .HasForeignKey("Section5Id");

                    b.HasOne("licenta.Entities.Section6", "Section6")
                        .WithMany()
                        .HasForeignKey("Section6Id");

                    b.HasOne("licenta.Entities.Section7", "Section7")
                        .WithMany()
                        .HasForeignKey("Section7Id");

                    b.HasOne("licenta.Entities.Section8", "Section8")
                        .WithMany()
                        .HasForeignKey("Section8Id");

                    b.HasOne("licenta.Entities.Section9", "Section9")
                        .WithMany()
                        .HasForeignKey("Section9Id");

                    b.HasOne("licenta.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section1");

                    b.Navigation("Section10");

                    b.Navigation("Section2");

                    b.Navigation("Section3");

                    b.Navigation("Section4");

                    b.Navigation("Section5");

                    b.Navigation("Section6");

                    b.Navigation("Section7");

                    b.Navigation("Section8");

                    b.Navigation("Section9");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("licenta.Entities.SyllabusVersion", b =>
                {
                    b.HasOne("licenta.Entities.Syllabus", "Syllabus")
                        .WithMany()
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Syllabus");
                });

            modelBuilder.Entity("licenta.Entities.Department", b =>
                {
                    b.Navigation("FieldsOfStudy");
                });

            modelBuilder.Entity("licenta.Entities.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("licenta.Entities.Institution", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("licenta.Entities.Section8", b =>
                {
                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
